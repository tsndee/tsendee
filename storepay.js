const inputs = document.querySelectorAll(".phone-input");
 let countdownInterval;
 let requestId = null;
 let accessToken = null;
 let tokenExpirationTime = 0;

 // –£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä—ã–≥ –æ—Ä—É—É–ª–∞—Ö —Ö—ç—Å—ç–≥
 inputs.forEach((input, index) => {
 input.addEventListener("input", (event) => {
 if (event.inputType !== "deleteContentBackward") {
 if (input.value && index < inputs.length - 1) {
 inputs[index + 1].focus();
 }
 }
 });

 input.addEventListener("keydown", (event) => {
 if (event.key === "Backspace" && !input.value && index > 0) {
 inputs[index - 1].focus();
 }
 });
 });

// Storepay API —Ç–æ—Ö–∏—Ä–≥–æ–æ
const AUTH_URL = "https://service.storepay.mn/merchant-uaa/oauth/token";
const CLIENT_ID = "merchantapp1";
const CLIENT_SECRET = "EnRZA3@B";

const USERNAME = "90095251";
const PASSWORD = "90095251";

window.accessToken = null;
window.refreshToken = null;
let isFetchingToken = false; // Token –¥–∞–≤—Ö–∞—Ä –∞–≤–∞—Ö—ã–≥ –∑–æ–≥—Å–æ–æ—Ö —Ñ–ª–∞–≥

// üîπ Basic Authorization Header –±—ç–ª–¥—ç—Ö —Ñ—É–Ω–∫—Ü
function getBasicAuthHeader() {
 const credentials = `${CLIENT_ID}:${CLIENT_SECRET}`;
 return `Basic ${btoa(credentials)}`;
}

// üîπ Token –∞–≤–∞—Ö —Ñ—É–Ω–∫—Ü (Basic Auth –∞—à–∏–≥–ª–∞–Ω–∞)
async function getAccessToken() {
 if (isFetchingToken || window.accessToken) return window.accessToken; // –î–∞–≤—Ö–∞—Ä –¥—É—É–¥–∞—Ö–≥“Ø–π

 isFetchingToken = true; // Token –∞–≤—á —ç—Ö—ç–ª—Å—ç–Ω –≥—ç–∂ —Ç—ç–º–¥—ç–≥–ª—ç–Ω—ç
 const body = new URLSearchParams();
 body.append("grant_type", "password");
 body.append("username", USERNAME);
 body.append("password", PASSWORD);

 try {
 const response = await fetch(AUTH_URL, {
 method: "POST",
 headers: {
 "Authorization": getBasicAuthHeader(),
 "Content-Type": "application/x-www-form-urlencoded"
 },
 body: body
 });

 const data = await response.json();
 isFetchingToken = false; // Token –∞–≤–∞—Ö –∞–∂–∏–ª–ª–∞–≥–∞–∞ –¥—É—É—Å—Å–∞–Ω

 if (data.access_token) {
 window.accessToken = data.access_token;
 window.refreshToken = data.refresh_token;
 console.log("‚úÖ:", window.accessToken);
 return window.accessToken;
 } else {
 console.error("‚ùå Token –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:", data);
 throw new Error("Token –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞.");
 }
 } catch (error) {
 isFetchingToken = false;
 console.error("‚ùå Token –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:", error);
 throw error;
 }
}

// üîπ Refresh token –∞—à–∏–≥–ª–∞–Ω access token —à–∏–Ω—ç—á–ª—ç—Ö —Ñ—É–Ω–∫—Ü
async function refreshAccessToken() {
 if (window.refreshToken) {
 const body = new URLSearchParams();
 body.append("grant_type", "refresh_token");
 body.append("refresh_token", window.refreshToken);

 try {
 const response = await fetch(AUTH_URL, {
 method: "POST",
 headers: {
 "Authorization": getBasicAuthHeader(),
 "Content-Type": "application/x-www-form-urlencoded"
 },
 body: body
 });

 const data = await response.json();

 if (data.access_token) {
 window.accessToken = data.access_token;
 console.log("‚úÖ –®–∏–Ω—ç access_token:", window.accessToken);
 } else {
 console.error("‚ùå Refresh token –∞—à–∏–≥–ª–∞–Ω —à–∏–Ω—ç access_token –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:", data);
 }
 } catch (error) {
 console.error("‚ùå Refresh token –∞—à–∏–≥–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:", error);
 }
 } else {
 console.error("Refresh token –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞!");
 }
}

// 2 —Ü–∞–≥ —Ç—É—Ç–∞–º–¥ —à–∏–Ω—ç access_token –∞–≤–∞—Ö
setInterval(refreshAccessToken, 2 * 60 * 60 * 1000); // 2 —Ü–∞–≥ = 2 * 60 * 60 * 1000ms

// üöÄ Token-–≥ —ç—Ö–ª—ç—ç–¥ –Ω—ç–≥ —É–¥–∞–∞ –∞–≤–∞—Ö
getAccessToken();


 // –ù—ç—Ö—ç–º–∂–ª—ç–ª –∏–ª–≥—ç—ç—Ö
 async function createInvoice() {
 try {
 const token = await getAccessToken(); // Token –∞–≤–∞—Ö

 const url = "https://service.storepay.mn/merchant/loan";
 let mobileNumber = "";
 inputs.forEach(input => {
 mobileNumber += input.value;
 });
 
 console.log("–ò–ª–≥—ç—ç–∂ –±—É–π mobileNumber:", mobileNumber);
 
 if (mobileNumber.length !== 8) {
 showPopup("–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä—ã–≥ –±“Ø—Ä—ç–Ω –æ—Ä—É—É–ª–Ω–∞ —É—É!"); 
 return;
 }

 const amountElement = document.querySelector(".id-good-2-price");
 if (!amountElement) {
 showPopup("–ú”©–Ω–≥”©–Ω –¥“Ø–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π!");
 return;
 }

 const amountText = amountElement.textContent.trim();
 const amount = parseInt(amountText.replace(/[^\d]/g, ""), 10); 

 if (isNaN(amount) || amount <= 0) {
 showPopup("–ú”©–Ω–≥”©–Ω –¥“Ø–Ω –±—É—Ä—É—É –±–∞–π–Ω–∞!");
 return;
 }
 console.log("–¶—ç–≤—ç—Ä –º”©–Ω–≥”©–Ω –¥“Ø–Ω:", amount);
 if (amount < 100000) {
 showPopup("–£—É—á–ª–∞–∞—Ä–∞–π, 100,000‚ÇÆ-—Å –¥—ç—ç—à —Ö—É–¥–∞–ª–¥–∞–Ω –∞–≤–∞–ª—Ç–∞–¥ –∞—à–∏–≥–ª–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π.");
 return;
 }

 const invoiceData = {
 storeId: "25071",
 mobileNumber: mobileNumber, 
 description: "test",
 amount: amount,
 callbackUrl: `https://merchant-tchibo.mn/webhook?id=${requestId}`
 };

 const response = await fetch(url, {
 method: "POST",
 headers: {
 "Content-Type": "application/json",
 "Authorization": `Bearer ${token}`
 },
 body: JSON.stringify(invoiceData)
 });


 const result = await response.json();
 
 console.log("API —Ö–∞—Ä–∏—É:", result);
 
 requestId = result.requestId;

 showPopup(result.message || "–ù—ç—Ö—ç–º–∂–ª—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç.", 120);

 } catch (error) {
 console.error("–ê–ª–¥–∞–∞:", error);
 showPopup("–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–∂ “Ø–∑—ç—ç—Ä—ç–π.");
 }
 }

 // Popup —Ö–∞—Ä—É—É–ª–∞—Ö
 function showPopup(message, minutes) {
 clearInterval(countdownInterval);

 const popup = document.getElementById("popup");
 const responseMessage = document.getElementById("apiResponseMessage");
 popup.style.display = "block";
 responseMessage.textContent = message;

 if (minutes) {
 startCountdown(minutes * 60);
 }
 }

 // Popup —Ö–∞—Ä—É—É–ª–∞—Ö
function showPopup(message, minutes) {
 clearInterval(countdownInterval);

 const popup = document.getElementById("popup");
 const responseMessage = document.getElementById("apiResponseMessage");
 popup.style.display = "block";
 responseMessage.textContent = message;

 if (minutes) {
 startCountdown(minutes * 60);
 }
}

// –•—É–≥–∞—Ü–∞–∞ —Ç–æ–æ–ª–æ—Ö
function startCountdown(duration) {
 let timer = duration;
 const countdownElement = document.getElementById("countdown");

 countdownInterval = setInterval(() => {
 const minutes = Math.floor(timer / 60);
 const seconds = timer % 60;
 countdownElement.textContent = `${minutes}:${seconds < 10 ? "0" : ""}${seconds}`;

 if (--timer < 0) {
 clearInterval(countdownInterval);
 countdownElement.textContent = "–•—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω!";
 }
 }, 1000);
}

// –•–∞–∞—Ö
function closePopup() {
 document.getElementById("popup").style.display = "none";
}

// –•“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç—Ö —Ç–æ–≤—á
document.getElementById("payButton").addEventListener("click", () => {
 createInvoice();
 // requestId-–∏–π–≥ —à–∞–ª–≥–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π –±–æ–ª –¥–∞—Ä–∞–∞ –Ω—å —à–∞–ª–≥–∞–∂ –±–æ–ª–Ω–æ
 if (requestId) {
 checkPaymentStatus(requestId);
 }
});


 // üîπ –¢”©–ª–±”©—Ä–∏–π–Ω —Å—Ç–∞—Ç—É—Å —à–∞–ª–≥–∞—Ö
async function checkPaymentStatus(requestId) {
 const checkUrl = `https://service.storepay.mn/merchant/loan/checkRequest/${requestId}`;
 try {
 const response = await fetch(checkUrl, {
 method: "GET",
 headers: {
 "Content-Type": "application/json",
 "Authorization": `Bearer ${await getAccessToken()}` // Access Token-–≥ —à—É—É–¥ –∞–≤–Ω–∞
 }
 });

 const result = await response.json();
 console.log("–®–∞–ª–≥–∞—Ö —Ö–∞—Ä–∏—É:", result);

 if (result.status === "paid") {
 document.getElementById("apiResponseMessage").textContent = "–¢”©–ª–±”©—Ä –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞!";
 } else if (result.status === "cancelled") {
 document.getElementById("apiResponseMessage").textContent = "–¢”©–ª–±”©—Ä —Ü—É—Ü–ª–∞–≥–¥–ª–∞–∞!";
 } else {
 document.getElementById("apiResponseMessage").textContent = "–¢”©–ª–±”©—Ä–∏–π–Ω –±–∞–π–¥–∞–ª —Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π –±–∞–π–Ω–∞!";
 }

 } catch (error) {
 console.error("–ê–ª–¥–∞–∞:", error);
 document.getElementById("apiResponseMessage").textContent = "–¢”©–ª–±”©—Ä–∏–π–Ω —Å—Ç–∞—Ç—É—Å —à–∞–ª–≥–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.";
 }
}
